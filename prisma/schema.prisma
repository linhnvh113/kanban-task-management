// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board {
  id String @id @default(uuid())
  name String
  columns Column[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("board")
}

model Column {
  id String @id @default(uuid())
  name String
  tasks Task[]

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String @map("board_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("column")
}

model Task {
  id String @id @default(uuid())
  title String
  description String?
  subtasks Subtask[]

  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String @map("column_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("task")
}

model Subtask {
  id String @id @default(uuid())
  title String
  isCompleted Boolean @default(false) @map("is_completed")

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String @map("task_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subtask")
}
